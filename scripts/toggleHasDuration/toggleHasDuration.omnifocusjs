/*{
    "author": "Kamil Kruczek",
    "targets": ["omnifocus"],
    "type": "action",
    "identifier": "kamil.kruczek.toggleHasDurationRule",
    "version": "1.0.0",
    "description": "Toggle 'has an estimated duration' rule in a custom perspective.",
    "label": "Toggle has duration rule",
    "shortLabel": "Toggle has duration rule",
    "mediumLabel": "Toggle has duration rule",
    "longLabel": "Toggle has duration rule",
    "paletteLabel": "Toggle has duration rule",
    "image": "deskclock"
}*/
(() => {
Calendar.current;
Formatter.Date.withStyle(Formatter.Date.Style.Short, null);
const changeIcon = (sender, label, iconName) => {
  sender.label = label;
  sender.toolTip = label;
  sender.image = Image.symbolNamed(iconName);
};
const isBuildInPerspective = (name) => Perspective.BuiltIn.all.includes(name);
const setValueForRule = (perspective, name, value) => {
  const rules = JSON.parse(JSON.stringify(perspective.archivedFilterRules));
  let foundRule = false;
  for (const rule of rules) {
    if (rule[name] !== void 0) {
      rule[name] = value;
      foundRule = true;
      break;
    }
  }
  if (!foundRule)
    rules.push({ [name]: value });
  perspective.archivedFilterRules = rules;
};
const getValueForRule = (perspective, name) => perspective.archivedFilterRules.find((rule) => rule[name] !== void 0) || {};
const deleteValueForRule = (perspective, name) => {
  const rules = JSON.parse(JSON.stringify(perspective.archivedFilterRules));
  const updatedRules = rules.filter((rule) => rule[name] === void 0);
  perspective.archivedFilterRules = updatedRules;
};
const RULE_NAME = "actionHasDuration";
const action = new PlugIn.Action(({ window }, sender) => {
  const customPerspective = Perspective.Custom.byName(window.perspective.name);
  const valueRule = getValueForRule(customPerspective, RULE_NAME);
  if (valueRule[RULE_NAME]) {
    deleteValueForRule(customPerspective, RULE_NAME);
    changeIcon(sender, "Toggle has duration - disabled", "deskclock");
  } else {
    setValueForRule(customPerspective, RULE_NAME, true);
    changeIcon(sender, "Toggle has duration - enabled", "deskclock.fill");
  }
});
action.validate = ({ window }, sender) => {
  const buildInPerspective = isBuildInPerspective(window.perspective);
  if (buildInPerspective)
    return false;
  const customPerspective = Perspective.Custom.byName(window.perspective.name);
  const valueRule = getValueForRule(customPerspective, RULE_NAME);
  if (valueRule[RULE_NAME]) {
    changeIcon(sender, "Toggle has duration - enabled", "deskclock.fill");
  } else {
    changeIcon(sender, "Toggle has duration - disabled", "deskclock");
  }
  return true;
};

return action;
})();