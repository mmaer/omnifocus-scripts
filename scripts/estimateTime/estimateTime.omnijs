/*{
	"type": "action",
	"targets": ["omnifocus"],
	"author": "Kamil Kruczek",
	"identifier": "kamil.kruczek.Estimate Time",
	"version": "0.1",
	"description": "Estimates time",
	"label": "Estimates time",
	"shortLabel": "Estimates time",
  "image": "hourglass"
}*/
(() => {
Calendar.current;
Formatter.Date.withStyle(Formatter.Date.Style.Short, null);
const formatMinutesToHours = (totalTime, type = "full") => {
  const hours = Math.floor(totalTime / 60);
  const minutes = totalTime % 60;
  if (type === "full")
    return `${hours === 0 ? "" : `${hours} hours `}${minutes} minutes`;
  return `${hours === 0 ? "" : `${hours}h`} ${minutes === 0 ? "" : `${minutes}m`}`;
};
const action = new PlugIn.Action((selection) => {
  const tasks = [...selection.projects, ...selection.tasks];
  const { totalTime, noEstimatedTasks } = tasks.reduce(({ noEstimatedTasks: noEstimatedTasks2, totalTime: totalTime2 }, { name, estimatedMinutes }) => ({
    noEstimatedTasks: estimatedMinutes === null ? [...noEstimatedTasks2, name] : noEstimatedTasks2,
    totalTime: estimatedMinutes === null ? totalTime2 : totalTime2 + estimatedMinutes
  }), { totalTime: 0, noEstimatedTasks: [] });
  const formattedTime = formatMinutesToHours(totalTime);
  const tasksNoEstimated = noEstimatedTasks.length > 1 ? `Tasks(${noEstimatedTasks.length}) have no estimate:
${noEstimatedTasks.join("\n")}` : "";
  const alert = new Alert(`Total time: ${formattedTime}`, tasksNoEstimated);
  alert.show(null);
});
action.validate = (selection) => selection.projects.length + selection.tasks.length >= 1;

return action;
})();