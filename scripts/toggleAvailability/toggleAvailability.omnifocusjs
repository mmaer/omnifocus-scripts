/*{
    "author": "Kamil Kruczek",
    "targets": ["omnifocus"],
    "type": "action",
    "identifier": "kamil.kruczek.toggleAvailabilityRule",
    "version": "1.0.0",
    "description": "Toggle 'availability' action in a custom perspective. Yu can change from 'Available' to 'Remaining' and vice versa.",
    "label": "Toggle availability rule",
    "shortLabel": "Toggle availability",
    "mediumLabel": "Toggle availability rule",
    "longLabel": "Toggle availability rule from Available to Remaining and vice versa",
    "paletteLabel": "Toggle availability rule",
    "image": "circle"
}*/
(() => {
Calendar.current;
Formatter.Date.withStyle(Formatter.Date.Style.Short, null);
const changeIcon = (sender, label, iconName) => {
  sender.label = label;
  sender.toolTip = label;
  sender.image = Image.symbolNamed(iconName);
};
const isBuildInPerspective = (name) => Perspective.BuiltIn.all.includes(name);
const setValueForRule = (perspective, ruleName, ruleValue) => {
  const rulesObjArray = JSON.parse(JSON.stringify(perspective.archivedFilterRules));
  let didChange = false;
  for (const rulesObj of rulesObjArray) {
    if (rulesObj[ruleName] !== void 0) {
      rulesObj[ruleName] = ruleValue;
      didChange = true;
      break;
    }
  }
  if (!didChange)
    rulesObjArray.push({ [ruleName]: ruleValue });
  perspective.archivedFilterRules = rulesObjArray;
};
const getValueForRule = (perspective, ruleName) => perspective.archivedFilterRules.find((rulesObj) => rulesObj[ruleName] !== void 0) || {};
const RULE_NAME = "actionAvailability";
const LABEL = "Toggle availability";
const action = new PlugIn.Action(({ window }, sender) => {
  const customPerspective = Perspective.Custom.byName(window.perspective.name);
  const valueRule = getValueForRule(customPerspective, RULE_NAME);
  if (valueRule[RULE_NAME] === "remaining") {
    setValueForRule(customPerspective, RULE_NAME, "available");
    changeIcon(sender, `${LABEL} - available`, "circle.fill");
  } else {
    setValueForRule(customPerspective, RULE_NAME, "remaining");
    changeIcon(sender, `${LABEL} - remaining`, "circle");
  }
});
action.validate = ({ window }, sender) => {
  const buildInPerspective = isBuildInPerspective(window.perspective);
  if (buildInPerspective)
    return false;
  const customPerspective = Perspective.Custom.byName(window.perspective.name);
  const valueRule = getValueForRule(customPerspective, RULE_NAME);
  if (valueRule[RULE_NAME] === "remaining") {
    changeIcon(sender, `${LABEL} - available`, "circle");
  } else {
    changeIcon(sender, `${LABEL} - remaining`, "circle.fill");
  }
  return true;
};

return action;
})();